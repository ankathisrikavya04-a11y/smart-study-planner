import datetime
from collections import defaultdict

class StudyTopic:
    def _init_(self, subject, topic, deadline, estimated_hours):
        self.subject = subject
        self.topic = topic
        self.deadline = datetime.datetime.strptime(deadline, "%Y-%m-%d").date()
        self.estimated_hours = estimated_hours
        self.remaining_hours = estimated_hours

def generate_study_plan(topics, daily_hours, days_ahead=7):
    today = datetime.date.today()
    schedule = defaultdict(list)

    # Sort topics by deadline
    topics.sort(key=lambda x: x.deadline)

    for day_offset in range(days_ahead):
        current_day = today + datetime.timedelta(days=day_offset)
        hours_left = daily_hours

        for topic in topics:
            if topic.remaining_hours <= 0 or topic.deadline < current_day:
                continue

            # Calculate proportion of time to assign
            days_left = (topic.deadline - current_day).days + 1
            if days_left <= 0:
                continue

            # Minimum time to stay on track
            daily_required = max(topic.remaining_hours / days_left, 0.5)
            study_time = min(daily_required, hours_left)

            if study_time > 0:
                schedule[current_day].append((topic.subject, topic.topic, round(study_time, 2)))
                topic.remaining_hours -= study_time
                hours_left -= study_time

            if hours_left <= 0:
                break

    return schedule

# ----------- Example Usage ------------
if _name_ == "_main_":
    # Define study topics
    topics = [
        StudyTopic("Math", "Calculus", "2025-10-10", 6),
        StudyTopic("Physics", "Kinematics", "2025-10-08", 4),
        StudyTopic("History", "WWII", "2025-10-12", 3),
    ]

    daily_hours = 4  # hours available each day
    study_plan = generate_study_plan(topics, daily_hours)

    # Print the study plan
    print("\nðŸ“… Smart Study Plan:")
    for day, sessions in sorted(study_plan.items()):
        print(f"\n{day} ({day.strftime('%A')}):")
        for subject, topic, hours in sessions:
            print(f"  ðŸ“˜ {subject} - {topic}: {hours} hours")


---

